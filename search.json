[{"path":"https://jamesotto852.github.io/ggdensity/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 ggdensity authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jamesotto852.github.io/ggdensity/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"James Otto. Author, maintainer. David Kahle. Author.","code":""},{"path":"https://jamesotto852.github.io/ggdensity/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Otto J, Kahle D (2022). ggdensity: Interpretable Bivariate Density Visualization 'ggplot2'. https://jamesotto852.github.io/ggdensity, https://github.com/jamesotto852/ggdensity.","code":"@Manual{,   title = {ggdensity: Interpretable Bivariate Density Visualization with 'ggplot2'},   author = {James Otto and David Kahle},   year = {2022},   note = {https://jamesotto852.github.io/ggdensity, https://github.com/jamesotto852/ggdensity}, }"},{"path":"https://jamesotto852.github.io/ggdensity/index.html","id":"ggdensity-","dir":"","previous_headings":"","what":"Interpretable Bivariate Density Visualization with ggplot2","title":"Interpretable Bivariate Density Visualization with ggplot2","text":"ggdensity extends ggplot2 providing interpretable visualizations density estimates based highest density regions (HDRs). ggdensity offers drop-replacements ggplot2 functions: instead ggplot2::geom_density_2d_filled(), use ggdensity::geom_hdr(); instead ggplot2::geom_density_2d(), use ggdensity::geom_hdr_lines(). Also included functions geom_hdr_fun() geom_hdr_lines_fun() plotting HDRs user-specified bivariate probability density functions.","code":""},{"path":"https://jamesotto852.github.io/ggdensity/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Interpretable Bivariate Density Visualization with ggplot2","text":"ggdensity available CRAN can installed install.packages(\"ggdensity\"). can also install development version GitHub :","code":"if (!requireNamespace(\"remotes\")) install.packages(\"remotes\") remotes::install_github(\"jamesotto852/ggdensity\")"},{"path":"https://jamesotto852.github.io/ggdensity/index.html","id":"geom_density_2d_filled-vs-geom_hdr","dir":"","previous_headings":"","what":"geom_density_2d_filled() vs. geom_hdr()","title":"Interpretable Bivariate Density Visualization with ggplot2","text":"standard way visualize joint distribution two continuous variables ggplot2 use ggplot2::geom_density_2d() geom_density_2d_filled(). ’s example:  ’s nice looking plot, isn’t immediately clear understand . ’s geom_density_2d_filled() generates contours equidistant level sets estimated bivariate density, .e. taking horizontal slices 3d surface equally-spaced heights, projecting intersections plane. get general feel density high, much else. interpret contour, need multiply height area bounds, course challenging just looking . geom_hdr() tries get around problem presenting regions estimated distribution immediately interpretable:  probs tells us probability bounded corresponding region, regions computed smallest regions bound level probability; called highest density regions HDRs. default, plotted regions show , , ,  HDRs estimated density, can changed probs argument geom_hdr(). Notice take-away plot made geom_density_2d_filled() subtlely yet significantly different plot made geom_hdr().","code":"library(\"tidyverse\"); theme_set(theme_minimal()) theme_update(panel.grid.minor = element_blank()) library(\"ggdensity\") library(\"patchwork\")   df <- data.frame(\"x\" = rnorm(1000), \"y\" = rnorm(1000)) p <- ggplot(df, aes(x, y)) + coord_equal() p + geom_density_2d_filled() p + geom_hdr()"},{"path":"https://jamesotto852.github.io/ggdensity/index.html","id":"visualizing-subpopulations-and-geom_hdr_lines","dir":"","previous_headings":"","what":"Visualizing subpopulations and geom_hdr_lines()","title":"Interpretable Bivariate Density Visualization with ggplot2","text":"ggdensity’s functions designed seamlessly consistent rest ggplot2 framework. consequence, pretty much everything expect just work . (Well, hope! Let us know ’s true.) example, geom_hdr() maps probability alpha aesthetic, fill color aesthetics available mapping variables. can use visualize subpopulations data. example, penguins data palmerpenguins may want look relationship bill length flipper length changes across different species penguins. ’s one way look :  Nice, bit overplotted. alleviate overplotting, can use geom_hdr_lines():  facet plot:  main point really think geom_hdr() geom_hdr_lines() drop-replacements functions like geom_density_2d_filled(), geom_density2d(), , can expect rest ggplot2 stuff just work.","code":"library(\"palmerpenguins\")  ggplot(penguins, aes(flipper_length_mm, bill_length_mm, fill = species)) +   geom_hdr(xlim = c(160, 240), ylim = c(30, 70)) +   geom_point(shape = 21) ggplot(penguins, aes(flipper_length_mm, bill_length_mm, color = species)) +   geom_hdr_lines(xlim = c(160, 240), ylim = c(30, 70)) +   geom_point(size = 1) ggplot(penguins, aes(flipper_length_mm, bill_length_mm, fill = species)) +   geom_hdr(xlim = c(160, 240), ylim = c(30, 70)) +   geom_point(shape = 21) +   facet_wrap(vars(species))"},{"path":"https://jamesotto852.github.io/ggdensity/index.html","id":"a-deeper-cut-illustrating-ggplot2-integration","dir":"","previous_headings":"","what":"A deeper cut illustrating ggplot2 integration","title":"Interpretable Bivariate Density Visualization with ggplot2","text":"underlying stat used geom_hdr() creates computed variable probs can mapped standard way map computed variables ggplot2, after_stat(). example, geom_hdr() geom_hdr_lines() map probs alpha aesthetic default. can override like , just sure override alpha aesthetic setting alpha = 1.","code":"ggplot(faithful, aes(eruptions, waiting)) +   geom_hdr(     aes(fill = after_stat(probs)),      alpha = 1, xlim = c(0, 8), ylim = c(30, 110)   ) ggplot(faithful, aes(eruptions, waiting)) +   geom_hdr_lines(     aes(color = after_stat(probs)),      alpha = 1, xlim = c(0, 8), ylim = c(30, 110)   )"},{"path":"https://jamesotto852.github.io/ggdensity/index.html","id":"statistics-details","dir":"","previous_headings":"","what":"Statistics details","title":"Interpretable Bivariate Density Visualization with ggplot2","text":"addition trying make visuals clean functions expect ggplot2 user, ’ve spent considerable effort trying ensure graphics ’re getting ggdensity statistically rigorous provide range estimation options detailed control. end, can pass method argument geom_hdr() geom_hdr_lines() allows specify various nonparametric parametric ways estimate underlying bivariate distribution, plans even . estimators offers advantages certain contexts. example, histogram estimators result HDRs obey constrained supports. Normal estimators can helpful providing simplified visuals give viewer sense distributions , potentially expense -simplifying removing important features variables (co-)vary.","code":""},{"path":"https://jamesotto852.github.io/ggdensity/index.html","id":"if-you-know-your-pdf","dir":"","previous_headings":"","what":"If you know your PDF","title":"Interpretable Bivariate Density Visualization with ggplot2","text":"discussion focused around densities estimated data. instances, distribution form function encodes joint PDF. circumstances, can use geom_hdr_fun() geom_hdr_lines_fun() make analogous plots. functions behave similarly geom_function() ggplot2, accepting argument fun specifying pdf summarized. ’s example:","code":"f <- function(x, y) dnorm(x) * dgamma(y, 5, 3)  ggplot() +   geom_hdr_fun(fun = f, xlim = c(-4, 4), ylim = c(0, 5))"},{"path":"https://jamesotto852.github.io/ggdensity/index.html","id":"visualizing-custom-parametric-density-estimates-with-geom_hdr_fun","dir":"","previous_headings":"If you know your PDF","what":"Visualizing custom parametric density estimates with geom_hdr_fun()","title":"Interpretable Bivariate Density Visualization with ggplot2","text":"addition methods density estimation available geom_hdr(), one perks geom_hdr_fun() allows plot parametric densities estimate outside ggdensity framework. basic idea fit distribution outside ggdensity calls method choice, say maximum likelihood, plug maximum likelihood estimate density formula obtain function plug geom_hdr_fun(). ’s example can assuming underlying data independent exponentially distributed unknown rates.","code":"set.seed(123) th <- c(3, 5) df <- data.frame(\"x\" = rexp(1000, th[1]), \"y\" = rexp(1000, th[2]))  # construct the likelihood function l <- function(th) {   log_liks <- apply(df, 1, function(xy) {     dexp(xy[1], rate = th[1], log = TRUE) +     dexp(xy[2], rate = th[2], log = TRUE)   })   sum(log_liks) }  # compute the mle (th_hat <- optim(c(2, 2), l, control = list(fnscale = -1))$par) #> [1] 2.912736 5.032125  # construct the parametric density estimate f <- function(x, y, th) dexp(x, th[1]) * dexp(y, th[2])  # pass estimated density into geom_hdr_fun() ggplot(df, aes(x, y)) +   geom_hdr_fun(fun = f, args = list(th = th_hat)) +   geom_point(shape = 21, fill = \"lightgreen\", alpha = .25) +   coord_equal()"},{"path":[]},{"path":"https://jamesotto852.github.io/ggdensity/index.html","id":"geom_hdr_points","dir":"","previous_headings":"Other perks","what":"geom_hdr_points()","title":"Interpretable Bivariate Density Visualization with ggplot2","text":"Inspired ggpointdensity, ggdensity provides scatterplot geom whereby individual data points can seen simultaneously HDRs. useful situations significant overplotting.","code":"p_points <- ggplot(diamonds, aes(carat, price)) +   geom_point()  p_hdr_points <- ggplot(diamonds, aes(carat, price)) +   geom_hdr_points()  p_points + p_hdr_points"},{"path":"https://jamesotto852.github.io/ggdensity/index.html","id":"geom_hdr_rug","dir":"","previous_headings":"Other perks","what":"geom_hdr_rug()","title":"Interpretable Bivariate Density Visualization with ggplot2","text":"Rug plots standard additions plots densities:  HDRs, can used visualize joint marginal HDRs simultaneously. marginal HDRs computed corresponding x y aesthetic variables. Note can substantially different: joint HDR product marginal HDRs.  Like geom_rug(), can placed different sides object:  sometimes find easier view rug intervals colored:  second probs guide currently bug. work around, can solve adding guides(alpha = \"none\"). Note also use length = unit(.2, \"cm\"), allows us make thickness axes reasonable plot. (Compare rug plots previous graphic.)","code":"ggplot(cars, aes(speed, dist)) +   geom_density_2d() +   geom_point() +   geom_rug() ggplot(cars, aes(speed, dist)) +   geom_hdr() +   geom_point(color = \"red\") +   geom_hdr_rug() ggplot(cars, aes(speed, dist)) +   geom_hdr() +   geom_point(color = \"red\") +   geom_hdr_rug(sides = \"tr\", outside = TRUE) +   coord_cartesian(clip = \"off\") ggplot(cars, aes(speed, dist)) +   geom_hdr() +   geom_point(color = \"red\") +   geom_hdr_rug(aes(fill = after_stat(probs)), length = unit(.2, \"cm\"), alpha = 1) +    scale_fill_viridis_d(option = \"magma\", begin = .8, end = 0)"},{"path":"https://jamesotto852.github.io/ggdensity/index.html","id":"a-caveat-and-recommendation-for-cropped-hdrs","dir":"","previous_headings":"","what":"A caveat and recommendation for cropped HDRs","title":"Interpretable Bivariate Density Visualization with ggplot2","text":"geom_hdr() related functions written intent playing nicely ggplot2, typical ggplot2 user expect rest ggplot2 ecosystem work way ggdensity. One place effect isn’t ideal limits x y scales. Without getting much detail, key observed points , properties estimated density. consistent geom_density_2d() stat_smooth(), example: computed aesthetics don’t extend past range data. One potential danger estimated HDRs computed based estimated density directly, discretization . non-parametric density estimation R works, e.g. MASS::kde2d(), parametric density estimation, . words: density estimate known points grid x-y aesthetic space. consequence, range small, ’s possible probabilistically non-trivial proportion density excluded computations, biasing resulting HDRs. punch line whenever see HDR getting truncated window plot, ’s probably good idea manually increase aesthetic limits use coord_cartesian() zoom needed. ’s example using previously created graphic. limits given coord_cartesian() call scale_y_continuous() simply effort make third plot comparable first. Note: support data isn’t respected -estimated density doesn’t know speed can’t go negative. ’s artifact effect described , ’s just ’s KDE’s .","code":"p1 <- ggplot(cars, aes(speed, dist)) +   geom_hdr() +   geom_point(color = \"red\") +   guides(alpha = \"none\") +   ggtitle(\"Default geom_hdr()\")  p2 <- ggplot(cars, aes(speed, dist)) +   geom_hdr(xlim = c(-20, 50), ylim = c(-40, 140)) +   geom_point(color = \"red\") +   guides(alpha = \"none\") +   ggtitle(\"Manually set xlim, ylim\")  p3 <- ggplot(cars, aes(speed, dist)) +   geom_hdr(xlim = c(-20, 50), ylim = c(-40, 140)) +   geom_point(color = \"red\") +   guides(alpha = \"none\") +   scale_y_continuous(breaks = 25*(0:5)) +   coord_cartesian(xlim = c(4, 25), ylim = c(-1, 120)) +    ggtitle(\"Zoom with coord_cartesian()\")  (p1 / p2 / p3) & theme(title = element_text(size = 9))"},{"path":"https://jamesotto852.github.io/ggdensity/index.html","id":"related-projects","dir":"","previous_headings":"","what":"Related projects","title":"Interpretable Bivariate Density Visualization with ggplot2","text":"great packages know ’re interested ggdensity. ggdist package provides several flexible geoms visualizing distributions data, mostly univariate data. hdrcde package allows make bivariate HDR plots well. surface, main difference hdrcde doesn’t use ggplot2 graphics; however, hood many differences. (coming explaining discrepancies.) code illustrating two strategies quite simple, trying make graphics directly comparable requires effort. ’s pretty good rendition faithful dataset, 272 observations.  look quite different, . ’s worth noting even within hdrcde variability well:  gghdr somewhat ggplot2 port hdrcde, developed team members. ways, ’s similar ggdensity. example, contains function gghdr::geom_hdr_rug() effectively ggdensity::geom_hdr_rug(); implements kind ggdensity::geom_hdr_pointdensity() via function gghdr::hdr_bin() plus color aesthetic geom_point(); provides boxplot alternative gghdr::geom_hdr_boxplot(). extent similarities ggdensity hdrcde/gghdr exist (obviously ), example convergent evolution. present authors discovered projects writing ggdensity, unfortunately. Interestingly, also designs CDE part well (“conditional density estimation”, think models); however implemented seeing hdrcde. can expect come road. Perhaps important difference ggdensity gghdr latter doesn’t implement bivariate HDRs ggplot2 framework, original motivation ggdensity. purpose, seems project available ggdensity.","code":"p_hdr_scale <- ggplot(faithful, aes(eruptions, waiting)) +   geom_hdr(     xlim = scales::expand_range(range(faithful$eruptions), mul = .25),     ylim = scales::expand_range(range(faithful$waiting),   mul = .25)   ) +   geom_point(color = \"red\") +   scale_x_continuous(breaks = 0:6) +   scale_y_continuous(breaks = (3:10)*10) +   guides(alpha = \"none\")  den <- with(faithful,   MASS::kde2d(eruptions, waiting, n = 100, lims = c(0,6,30,105)) )  library(\"hdrcde\") #> This is hdrcde 3.4 p_den <- ~ with(faithful,   plot(     hdr.2d(eruptions, waiting, prob = c(50, 80, 95, 99), den = den),     pointcol = \"red\",     show.points = TRUE,     xlim = c(0, 6),     ylim = c(30, 105)   ) )  par(mar = c(0,1.75,0,0), bg = NA) p_hdr_scale +   coord_cartesian(xlim = c(0, 6), ylim = c(30, 105), expand = FALSE) +   wrap_elements(panel = p_den, clip = FALSE) par(mar = c(3, 3, 1, 1) + 0.1, mfrow = c(1, 2)) with(faithful,   plot(     hdr.2d(eruptions, waiting, prob = c(50, 80, 95, 99),        kde.package = \"ash\", xextend = .20),     pointcol = \"red\",     show.points = TRUE,     xlim = c(0, 6),     ylim = c(30, 105)   ) ) with(faithful,   plot(     hdr.2d(eruptions, waiting, prob = c(50, 80, 95, 99),        kde.package = \"ks\", xextend = .20),     pointcol = \"red\",     show.points = TRUE,     xlim = c(0, 6),     ylim = c(30, 105)   ) )"},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr.html","id":null,"dir":"Reference","previous_headings":"","what":"Highest density regions of a 2D density estimate — geom_hdr","title":"Highest density regions of a 2D density estimate — geom_hdr","text":"Perform 2D density estimation, compute plot resulting highest density regions. geom_hdr() draws filled regions, geom_hdr_lines() draws lines outlining regions. Note, plotted objects probs mapped alpha aesthetic default.","code":""},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Highest density regions of a 2D density estimate — geom_hdr","text":"","code":"stat_hdr(   mapping = NULL,   data = NULL,   geom = \"hdr\",   position = \"identity\",   ...,   method = \"kde\",   probs = c(0.99, 0.95, 0.8, 0.5),   bins = NULL,   n = 100,   xlim = NULL,   ylim = NULL,   nudgex = \"none\",   nudgey = \"none\",   smooth = FALSE,   adjust = c(1, 1),   h = NULL,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )  geom_hdr(   mapping = NULL,   data = NULL,   stat = \"hdr\",   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )  stat_hdr_lines(   mapping = NULL,   data = NULL,   geom = \"hdr_lines\",   position = \"identity\",   ...,   method = \"kde\",   probs = c(0.99, 0.95, 0.8, 0.5),   bins = NULL,   n = 100,   xlim = NULL,   ylim = NULL,   nudgex = \"none\",   nudgey = \"none\",   smooth = FALSE,   adjust = c(1, 1),   h = NULL,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )  geom_hdr_lines(   mapping = NULL,   data = NULL,   stat = \"hdr_lines\",   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Highest density regions of a 2D density estimate — geom_hdr","text":"mapping Set aesthetic mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom geometric object use display data position Position adjustment, either string, result call position adjustment function. ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat. method Density estimator use, accepts character vector: \"kde\", \"histogram\", \"freqpoly\", \"mvnorm\". probs Probabilities compute highest density regions . bins Number bins along axis histogram frequency polygon estimators. Either vector length 2 scalar value recycled dimensions. Defaults normal reference rule (Scott, pg 87). n Resolution grid used discrete approximations kernel density parametric estimators. xlim, ylim Range compute draw regions. NULL, defaults range data. nudgex Horizontal rule choosing witness points smoothed histogram method, accepts character vector: \"left\", \"none\", \"right\". nudgey Vertical rule choosing witness points smoothed histogram method, accepts character vector: \"\", \"none\", \"\". smooth TRUE, HDRs computed \"histogram\" method smoothed. adjust multiplicative bandwidth adjustment used h NULL. h Bandwidth kernel density estimator. NULL, estimated using MASS::bandwidth.nrd() na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). stat statistical transformation use data layer, string.","code":""},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Highest density regions of a 2D density estimate — geom_hdr","text":"geom_hdr understands following aesthetics (required aesthetics bold): x y alpha color fill group linetype size subgroup geom_hdr_lines understands following aesthetics (required aesthetics bold): x y alpha color group linetype size subgroup","code":""},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"Highest density regions of a 2D density estimate — geom_hdr","text":"probs probability associated highest density region, specified probs.","code":""},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Highest density regions of a 2D density estimate — geom_hdr","text":"Scott, David W. Multivariate Density Estimation (2e), Wiley.","code":""},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Highest density regions of a 2D density estimate — geom_hdr","text":"","code":"# basic simulated data with bivariate normal data and various methods # (note: code is commented out in this file to save cran check time) df <- data.frame(x = rnorm(1000), y = rnorm(1000)) p <- ggplot(df, aes(x, y)) + coord_equal() p + geom_hdr()  p + geom_hdr(method = \"mvnorm\")  p + geom_hdr(method = \"freqpoly\")  # p + geom_hdr(method = \"histogram\")   # adding point layers on top to visually assess region estimates pts <- geom_point(size = .2, color = \"red\") p + geom_hdr() + pts  p + geom_hdr(method = \"mvnorm\") + pts  p + geom_hdr(method = \"freqpoly\") + pts  # p + geom_hdr(method = \"histogram\") + pts   # 2+ groups - mapping other aesthetics in the geom rdata <- function(n, n_groups = 3, radius = 3) {   list_of_dfs <- lapply(0:(n_groups-1), function(k) {     mu <- c(cos(2*k*pi/n_groups), sin(2*k*pi/n_groups))     m <- MASS::mvrnorm(n, radius*mu, diag(2))     structure(data.frame(m, as.character(k)), names = c(\"x\", \"y\", \"c\"))   })   do.call(\"rbind\", list_of_dfs) }  dfc <- rdata(1000, n_groups = 5) pf <- ggplot(dfc, aes(x, y, fill = c)) + coord_equal() pf + geom_hdr()  if (FALSE) {   pf + geom_hdr(method = \"mvnorm\")   pf + geom_hdr(method = \"mvnorm\", probs = .90, alpha = .5)   pf + geom_hdr(method = \"histogram\")   pf + geom_hdr(method = \"freqpoly\") }   # highest density region boundary lines p + geom_hdr_lines()  p + geom_hdr_lines(method = \"mvnorm\")  if (FALSE) {   pc <- ggplot(dfc, aes(x, y, color = c)) + coord_equal() + theme_minimal() +     theme(panel.grid.minor = element_blank())   pc + geom_hdr_lines()   pc + geom_hdr_lines(method = \"mvnorm\") }   # data with boundaries ggplot(df, aes(x^2)) + geom_histogram(bins = 30)  ggplot(df, aes(x^2)) + geom_histogram(bins = 30, boundary = 0)  ggplot(df, aes(x^2, y^2)) + geom_hdr(method = \"histogram\")"},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Highest density regions of a bivariate pdf — geom_hdr_fun","title":"Highest density regions of a bivariate pdf — geom_hdr_fun","text":"Compute plot highest density regions (HDRs) bivariate pdf. geom_hdr_fun() draws filled regions, geom_hdr_fun_lines() draws lines outlining regions. Note, plotted objects probs mapped alpha aesthetic default.","code":""},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Highest density regions of a bivariate pdf — geom_hdr_fun","text":"","code":"stat_hdr_fun(   mapping = NULL,   data = NULL,   geom = \"hdr_fun\",   position = \"identity\",   ...,   fun,   args = list(),   normalized = TRUE,   probs = c(0.99, 0.95, 0.8, 0.5),   xlim = NULL,   ylim = NULL,   res = 100,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )  geom_hdr_fun(   mapping = NULL,   data = NULL,   stat = \"hdr_fun\",   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )  stat_hdr_lines_fun(   mapping = NULL,   data = NULL,   geom = \"hdr_lines_fun\",   position = \"identity\",   ...,   fun,   args = list(),   normalized = TRUE,   probs = c(0.99, 0.95, 0.8, 0.5),   xlim = NULL,   ylim = NULL,   res = 100,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )  geom_hdr_lines_fun(   mapping = NULL,   data = NULL,   stat = \"hdr_lines_fun\",   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Highest density regions of a bivariate pdf — geom_hdr_fun","text":"mapping Set aesthetic mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom geometric object use display data position Position adjustment, either string, result call position adjustment function. ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat. fun function, joint probability density function, must vectorized first two arguments; see examples. args List additional arguments passed function fun named list. normalized function normalized (proper PDF)? , set FALSE. probs Probabilities compute highest density regions . xlim, ylim Optionally, restrict support pdf (fun) range. res Resolution grid fun evaluated . na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). stat statistical transformation use data layer, string.","code":""},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr_fun.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Highest density regions of a bivariate pdf — geom_hdr_fun","text":"geom_hdr_fun understands following aesthetics (required aesthetics bold): x y alpha color fill group linetype size subgroup geom_hdr_fun_lines understands following aesthetics (required aesthetics bold): x y alpha color group linetype size subgroup","code":""},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr_fun.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"Highest density regions of a bivariate pdf — geom_hdr_fun","text":"probs probability associated highest density region, specified probs.","code":""},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Highest density regions of a bivariate pdf — geom_hdr_fun","text":"","code":"f <- function(x, y) dexp(x) * dexp(y) ggplot() +   geom_hdr_fun(fun = f, xlim = c(0, 10), ylim = c(0, 10))    # the hdr of a custom parametric model  # generate example data n <- 1000 th_true <- c(3, 8)  rdata <- function(n, th) {   gen_single_obs <- function(th) {     rchisq(2, df = th) # can be anything   }   df <- replicate(n, gen_single_obs(th))   setNames(as.data.frame(t(df)), c(\"x\", \"y\")) } data <- rdata(n, th_true)  # estimate unknown parameters via maximum likelihood likelihood <- function(th) {   th <- abs(th) # hack to enforce parameter space boundary   log_f <- function(v) {     x <- v[1]; y <- v[2]     dchisq(x, df = th[1], log = TRUE) + dchisq(y, df = th[2], log = TRUE)   }   sum(apply(data, 1, log_f)) } (th_hat <- optim(c(1, 1), likelihood, control = list(fnscale = -1))$par) #> [1] 2.970593 7.927554  # plot f for the give model f <- function(x, y, th) dchisq(x, df = th[1]) * dchisq(y, df = th[2])  ggplot(data, aes(x, y)) +   geom_hdr_fun(fun = f, args = list(th = th_hat)) +   geom_point(size = .25, color = \"red\")   ggplot(data, aes(x, y)) +   geom_hdr_fun(fun = f, args = list(th = th_hat)) +   geom_point(size = .25, color = \"red\") +   xlim(0, 40) + ylim(c(0, 40))"},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatterplot colored by highest density regions of a 2D density estimate — geom_hdr_points","title":"Scatterplot colored by highest density regions of a 2D density estimate — geom_hdr_points","text":"Perform 2D density estimation, compute resulting highest density regions (HDRs), plot provided data scatterplot points colored according corresponding HDR","code":""},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatterplot colored by highest density regions of a 2D density estimate — geom_hdr_points","text":"","code":"stat_hdr_points(   mapping = NULL,   data = NULL,   geom = \"point\",   position = \"identity\",   ...,   method = \"kde\",   probs = c(0.99, 0.95, 0.8, 0.5),   bins = NULL,   n = 100,   xlim = NULL,   ylim = NULL,   nudgex = \"none\",   nudgey = \"none\",   smooth = FALSE,   adjust = c(1, 1),   h = NULL,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )  geom_hdr_points(   mapping = NULL,   data = NULL,   stat = \"hdr_points\",   position = \"identity\",   ...,   method = \"kde\",   probs = c(0.99, 0.95, 0.8, 0.5),   bins = NULL,   n = 100,   xlim = NULL,   ylim = NULL,   nudgex = \"none\",   nudgey = \"none\",   smooth = FALSE,   adjust = c(1, 1),   h = NULL,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatterplot colored by highest density regions of a 2D density estimate — geom_hdr_points","text":"mapping Set aesthetic mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom geometric object use display data position Position adjustment, either string, result call position adjustment function. ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat. method Density estimator use, accepts character vector: \"kde\", \"histogram\", \"freqpoly\", \"mvnorm\". probs Probabilities compute highest density regions . bins Number bins along axis histogram frequency polygon estimators. Either vector length 2 scalar value recycled dimensions. Defaults normal reference rule (Scott, pg 87). n Number grid points direction. xlim Range compute draw regions. NULL, defaults range data. ylim Range compute draw regions. NULL, defaults range data. nudgex Horizontal rule choosing witness points smoothed histogram method, accepts character vector: \"left\", \"none\", \"right\". nudgey Vertical rule choosing witness points smoothed histogram method, accepts character vector: \"\", \"none\", \"\". smooth TRUE, HDRs computed \"histogram\" method smoothed. adjust multiplicative bandwidth adjustment used 'h' 'NULL'. makes possible adjust bandwidth still using bandwidth estimator. example, adjust = 1/2 means use half default bandwidth. h Bandwidth (vector length two). NULL, estimated using MASS::bandwidth.nrd(). na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). stat Use override default connection geom_density_2d() stat_density_2d().","code":""},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr_points.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Scatterplot colored by highest density regions of a 2D density estimate — geom_hdr_points","text":"geom_hdr_points understands following aesthetics (required aesthetics bold): x y alpha color fill group linetype size subgroup","code":""},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr_points.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"Scatterplot colored by highest density regions of a 2D density estimate — geom_hdr_points","text":"probs probability associated highest density region, specified probs.","code":""},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scatterplot colored by highest density regions of a 2D density estimate — geom_hdr_points","text":"","code":"# basic simulated data with bivariate normal data and various methods # (note: code is commented out in this file to save cran check time) df <- data.frame(x = rnorm(500), y = rnorm(500)) p <- ggplot(df, aes(x, y)) + coord_equal() p + geom_hdr_points()  p + geom_hdr_points(method = \"mvnorm\")  p + geom_hdr_points(method = \"freqpoly\")  # p + geom_hdr_points(method = \"histogram\")  # setting aes(fill = after_stat(probs)), color = \"black\", and # shape = 21 helps alleviate overplotting: p + geom_hdr_points(aes(fill = after_stat(probs)), color = \"black\", shape = 21, size = 2)   # also works well with geom_hdr_lines(): p + geom_hdr_lines(aes(color = after_stat(probs)), alpha = 1) +  geom_hdr_points(aes(fill = after_stat(probs)), color = \"black\", shape = 21, size = 2)"},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr_points_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatterplot colored by highest density regions of a bivariate pdf — geom_hdr_points_fun","title":"Scatterplot colored by highest density regions of a bivariate pdf — geom_hdr_points_fun","text":"Compute highest density regions (HDRs) bivariate pdf plot provided data scatterplot points colored according corresponding HDR.","code":""},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr_points_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatterplot colored by highest density regions of a bivariate pdf — geom_hdr_points_fun","text":"","code":"stat_hdr_points_fun(   mapping = NULL,   data = NULL,   geom = \"hdr_points_fun\",   position = \"identity\",   ...,   fun,   args = list(),   normalized = TRUE,   probs = c(0.99, 0.95, 0.8, 0.5),   xlim = NULL,   ylim = NULL,   res = 100,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )  geom_hdr_points_fun(   mapping = NULL,   data = NULL,   stat = \"hdr_points_fun\",   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr_points_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatterplot colored by highest density regions of a bivariate pdf — geom_hdr_points_fun","text":"mapping Set aesthetic mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom geometric object use display data position Position adjustment, either string, result call position adjustment function. ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat. fun function, joint probability density function, must vectorized first two arguments; see examples. args List additional arguments passed function fun named list. normalized function normalized (proper PDF)? , set FALSE. probs Probabilities compute highest density regions . xlim Optionally, restrict support pdf (fun) range. ylim Optionally, restrict support pdf (fun) range. res Resolution grid fun evaluated . na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). stat Use override default connection geom_density_2d() stat_density_2d().","code":""},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr_points_fun.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Scatterplot colored by highest density regions of a bivariate pdf — geom_hdr_points_fun","text":"geom_hdr_points_fun understands following aesthetics (required aesthetics bold): x y alpha color fill group linetype size subgroup","code":""},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr_points_fun.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"Scatterplot colored by highest density regions of a bivariate pdf — geom_hdr_points_fun","text":"probs probability associated highest density region, specified probs.","code":""},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr_points_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scatterplot colored by highest density regions of a bivariate pdf — geom_hdr_points_fun","text":"","code":"# can plot points colored according to known pdf: f <- function(x, y) dexp(x) * dexp(y) df <- data.frame(x = rexp(1000), y = rexp(1000))  ggplot(df, aes(x, y)) +   geom_hdr_points_fun(fun = f, xlim = c(0, 10), ylim = c(0, 10))    # also allows for hdrs of a custom parametric model  # generate example data n <- 1000 th_true <- c(3, 8)  rdata <- function(n, th) {   gen_single_obs <- function(th) {     rchisq(2, df = th) # can be anything   }   df <- replicate(n, gen_single_obs(th))   setNames(as.data.frame(t(df)), c(\"x\", \"y\")) } data <- rdata(n, th_true)  # estimate unknown parameters via maximum likelihood likelihood <- function(th) {   th <- abs(th) # hack to enforce parameter space boundary   log_f <- function(v) {     x <- v[1]; y <- v[2]     dchisq(x, df = th[1], log = TRUE) + dchisq(y, df = th[2], log = TRUE)   }   sum(apply(data, 1, log_f)) } (th_hat <- optim(c(1, 1), likelihood, control = list(fnscale = -1))$par) #> [1] 3.015493 8.221022  # plot f for the give model f <- function(x, y, th) dchisq(x, df = th[1]) * dchisq(y, df = th[2])  ggplot(data, aes(x, y)) +   geom_hdr_points_fun(fun = f, args = list(th = th_hat))   ggplot(data, aes(x, y)) +   geom_hdr_points_fun(aes(fill = after_stat(probs)), shape = 21, color = \"black\",     fun = f, args = list(th = th_hat), na.rm = TRUE) +   geom_hdr_lines_fun(aes(color = after_stat(probs)), alpha = 1, fun = f, args = list(th = th_hat)) +   lims(x = c(0, 15), y = c(0, 25))"},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr_rug.html","id":null,"dir":"Reference","previous_headings":"","what":"Rug plots of marginal highest density region estimates — geom_hdr_rug","title":"Rug plots of marginal highest density region estimates — geom_hdr_rug","text":"Perform 1D density estimation, compute plot resulting highest density regions way similar ggplot2::geom_rug(). Note, plotted objects probs mapped alpha aesthetic default.","code":""},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr_rug.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rug plots of marginal highest density region estimates — geom_hdr_rug","text":"","code":"stat_hdr_rug(   mapping = NULL,   data = NULL,   geom = \"hdr_rug\",   position = \"identity\",   ...,   method = \"kde\",   probs = c(0.99, 0.95, 0.8, 0.5),   xlim = NULL,   ylim = NULL,   h = \"nrd0\",   adjust = 1,   kernel = \"gaussian\",   bins = NULL,   n = 512,   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE )  geom_hdr_rug(   mapping = NULL,   data = NULL,   stat = \"hdr_rug\",   position = \"identity\",   ...,   outside = FALSE,   sides = \"bl\",   length = unit(0.03, \"npc\"),   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE )"},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr_rug.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rug plots of marginal highest density region estimates — geom_hdr_rug","text":"mapping Set aesthetic mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom Use override default connection geom_density() stat_density(). position Position adjustment, either string, result call position adjustment function. ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat. method Density estimator use, accepts character vector: \"kde\", \"histogram\", \"freqpoly\", \"mvnorm\". probs Probabilities compute highest density regions . xlim Range compute draw regions. NULL, defaults range data. ylim Range compute draw regions. NULL, defaults range data. h smoothing bandwidth used. numeric, standard deviation smoothing kernel. character, rule choose bandwidth, listed stats::bw.nrd(). adjust multiplicate bandwidth adjustment. makes possible adjust bandwidth still using bandwidth estimator. example, adjust = 1/2 means use half default bandwidth. kernel Kernel. See list available kernels density(). bins Number bins along axis histogram frequency polygon estimators. Either vector length 2 scalar value recycled dimensions. Defaults normal reference rule (Scott, pg 87). n Resolution grid used discrete approximations kernel density parametric estimators. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). stat statistical transformation use data layer, string. outside logical controls whether move rug tassels outside plot area. Default (FALSE). also need use coord_cartesian(clip = \"\"). set TRUE, also consider changing sides argument \"tr\". See examples. sides string controls sides plot rugs appear . can set string containing \"trbl\", top, right, bottom, left. length grid::unit() object sets length rug lines. Use scale expansion avoid overplotting data.","code":""},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr_rug.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Rug plots of marginal highest density region estimates — geom_hdr_rug","text":"geom_hdr_rug understands following aesthetics (required aesthetics bold): alpha fill group subgroup x y","code":""},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr_rug.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"Rug plots of marginal highest density region estimates — geom_hdr_rug","text":"probs probability highest density region, specified probs, corresponding point.","code":""},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr_rug.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Rug plots of marginal highest density region estimates — geom_hdr_rug","text":"Scott, David W. Multivariate Density Estimation (2e), Wiley.","code":""},{"path":"https://jamesotto852.github.io/ggdensity/reference/geom_hdr_rug.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rug plots of marginal highest density region estimates — geom_hdr_rug","text":"","code":"df <- data.frame(x = rnorm(100), y = rnorm(100))  # Plot marginal HDRs for bivariate data ggplot(df, aes(x, y)) +   geom_point() +   geom_hdr_rug() +   coord_fixed()   ggplot(df, aes(x, y)) +   geom_hdr() +   geom_hdr_rug() +   coord_fixed()   # Or, plot marginal HDR for univariate data ggplot(df, aes(x)) +   geom_density() +   geom_hdr_rug()   ggplot(df, aes(y = y)) +   geom_density() +   geom_hdr_rug()   # Can specify location of marginal HDRs as in ggplot2::geom_rug(), ggplot(df, aes(x, y)) +   geom_hdr() +   geom_hdr_rug(sides = \"tr\", outside = TRUE) +   coord_fixed(clip = \"off\")   # Can use same methods of density estimation as geom_hdr(). # For data with constrained support, we suggest setting method = \"histogram\": ggplot(df, aes(x^2)) +  geom_histogram(bins = 30, boundary = 0) +  geom_hdr_rug(method = \"histogram\")   ggplot(df, aes(x^2, y^2)) +  geom_hdr(method = \"histogram\") +  geom_hdr_rug(method = \"histogram\") +  coord_fixed()"},{"path":"https://jamesotto852.github.io/ggdensity/reference/ggdensity.html","id":null,"dir":"Reference","previous_headings":"","what":"ggdensity: Stats and Geoms for Density Estimation with ggplot2 — ggdensity","title":"ggdensity: Stats and Geoms for Density Estimation with ggplot2 — ggdensity","text":"package allows flexible computations visualization density estimates ggplot2.","code":""},{"path":[]},{"path":"https://jamesotto852.github.io/ggdensity/news/index.html","id":"features-0-1-0","dir":"Changelog","previous_headings":"","what":"Features","title":"ggdensity 0.1.0","text":"Added geom/stat_hdr_rug() visualizing marginal HDRs via “rug plot” style graphics along plot axes (#14) Added geom/stat_hdr_points() geom/stat_hdr_points_fun() visualizing HDR membership points via colored scatterplot (#15)","code":""},{"path":"https://jamesotto852.github.io/ggdensity/news/index.html","id":"fixes-0-1-0","dir":"Changelog","previous_headings":"","what":"Fixes","title":"ggdensity 0.1.0","text":"Changed name computed variable stat functions level probs","code":""}]
